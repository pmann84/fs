# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Release Build

on: workflow_dispatch
# on:
#   push:
#     tags:
#       - v*

permissions:
  contents: write

jobs:
  windows-build:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=cl
          -DCMAKE_C_COMPILER=cl
          -DCMAKE_BUILD_TYPE=Release
          -S ${{ github.workspace }}

      - name: Build Release
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: |
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release
          dir ${{ steps.strings.outputs.build-output-dir }}

      - uses: actions/upload-artifact@v2
        with:
          name: fs-binary-windows
          path: |
            ${{ steps.strings.outputs.build-output-dir }}/fs/Release/fs.exe

  linux-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=g++
          -DCMAKE_C_COMPILER=gcc
          -DCMAKE_BUILD_TYPE=Release
          -S ${{ github.workspace }}

      - name: Build Release
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release

      - uses: actions/upload-artifact@v2
        with:
          name: fs-binary-linux
          working-directory: ${{ steps.strings.outputs.build-output-dir }}
          path: |
            fs/Release/fs.exe
            
            

  release:
    needs: [windows-build] #, linux-build]
    runs-on: ubuntu-latest
    steps:
      - name: Set Release environment
        id: relver
        #run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
        run: echo ::set-output name=tag::v1.0.1
        shell: bash

#      - name: Download Linux Binaries
#        uses: actions/download-artifact@v2
#        with:
#          name: fs-binary-linux
#          path: fs-binary-linux

      - name: Download Windows Binaries
        uses: actions/download-artifact@v2
        with:
          name: fs-binary-windows
          path: fs-binary-windows

      - name: Bundle Release Artifacts
        run: |
          tar -acf windows-${{ steps.relver.outputs.tag }}.zip -C fs-binary-windows fs.exe
  # mv fs-binary-windows/fs.exe fs-binary-windows/fs-windows-${{ steps.relver.outputs.tag }}.exe
# mv cli-binary-linux/XX cli-binary-linux/XX--${{ steps.relver.outputs.tag }}-linux-x86_64

      - name: Debug output
        run: |
          dir
          dir fs-binary-windows
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        # if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ steps.relver.outputs.tag }}
          name: ${{ steps.relver.outputs.tag }}
          files: |
            windows-${{ steps.relver.outputs.tag }}.zip
#             fs-binary-linux/*
















#      - name: Release
#        uses: softprops/action-gh-release@v1
#        tag_name: ${{ steps.relver.outputs.tag }}
#        name: ${{ steps.relver.outputs.tag }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          files: |
#            fs-binary-linux/*
#            fs-binary-windows/*

#  build:
#    runs-on: ${{ matrix.os }}
#
#    strategy:
#      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
#      fail-fast: false
#
#      # Set up a matrix to run the following 3 configurations:
#      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
#      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
#      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
#      #
#      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
#      matrix:
#        os: [ubuntu-latest, windows-latest]
#        build_type: [Release]
#        c_compiler: [gcc, clang, cl]
#        include:
#          - os: windows-latest
#            c_compiler: cl
#            cpp_compiler: cl
#          # - os: ubuntu-latest
#          #   c_compiler: gcc
#          #   cpp_compiler: g++
#        exclude:
#          - os: windows-latest
#            c_compiler: gcc
#          - os: windows-latest
#            c_compiler: clang
#          - os: ubuntu-latest
#            c_compiler: cl
#          - os: ubuntu-latest
#            c_compiler: clang
#          - os: ubuntu-latest
#            c_compiler: gcc
#            #cpp_compiler: g++
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#        with:
#          submodules: 'true'
#
#      - name: Set reusable strings
#        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
#        id: strings
#        shell: bash
#        run: |
#          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
#
#      - name: Set Release environment
#        id: relver
#        #run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
#        run: echo ::set-output name=tag::1.0.1
#        shell: bash
#
#      - name: Configure CMake
#        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#        run: >
#          cmake -B ${{ steps.strings.outputs.build-output-dir }}
#          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
#          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
#          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
#          -S ${{ github.workspace }}
#
#      - name: Build
#        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
#        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
#
#      - name: Create Tarball
#        working-directory: ${{ steps.strings.outputs.build-output-dir }}
#        #del /f ${{ matrix.os }}-binaries-${{ steps.relver.outputs.tag }}.zip
#        run: |
#          tar.exe -a -c -f ${{ matrix.os }}-binaries-${{ steps.relver.outputs.tag }}.zip -C fs/Release fs.exe
#          dir
#
#      - name: Create Release
#        uses: softprops/action-gh-release@v1
#        # if: startsWith(github.ref, 'refs/tags/')
#        with:
#          tag_name: ${{ steps.relver.outputs.tag }}
#          name: ${{ steps.relver.outputs.tag }}
#          files: ${{ matrix.os }}-binaries-${{ steps.relver.outputs.tag }}.zip
